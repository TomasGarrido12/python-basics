# Esta funci√≥n general se utiliza para filtrar una lista de productos
# seg√∫n un criterio definido en la funci√≥n callback.
# - products: Lista de productos a filtrar.
# - callback: Funci√≥n que define el criterio de filtrado.
def filter_by(products, callback):
    pass


# Esta funci√≥n retorna un callback para filtrar productos por rango de precio.
# - min_price: Precio m√≠nimo del rango.
# - max_price: Precio m√°ximo del rango.
# La funci√≥n retornada debe tomar un producto como argumento y devolver True
# si el precio del producto est√° dentro del rango especificado.
def is_in_price_range(min_price, max_price):
    pass


# Esta funci√≥n retorna un callback para filtrar productos por palabras clave
# en el t√≠tulo y la descripci√≥n.
# - keywords: Lista de palabras clave a buscar.
# La funci√≥n retornada debe tomar un producto como argumento y devolver True
# si todas las palabras clave est√°n presentes tanto en el t√≠tulo como en
# la descripci√≥n del producto.
def contains_keywords(keywords):
    pass


# Esta funci√≥n retorna un callback para identificar productos con bajo stock.
# - stock_threshold: Umbral de stock por debajo del cual se considera bajo stock.
# La funci√≥n retornada debe tomar un producto como argumento y devolver True
# si la cantidad de stock del producto est√° por debajo del umbral especificado.
def is_below_stock_threshold(stock_threshold):
    pass


# Ejemplo de uso:
# products = [...]
# filtered_products = filter_by(products, is_in_price_range(10, 50))


# BONUS! üå∂Ô∏èüå∂Ô∏èüå∂Ô∏è
# Combinando filtros

# Crear un filtrado flexible que permita aplicar m√∫ltiples criterios simult√°neamente y que pueda adaptarse a futuras necesidades de filtrado.
# La firma de la funci√≥n deber√≠a ser: filter_products(products, *callbacks)
# Una implementaci√≥n posible podr√≠a ser una lista de callbacks, pero vamos a usar 'variable-length arguments', como para ver algo nuevo.

# Un ejemplo de como permitir una cantidad variable de argumentos es:


def my_function(someArg, *variableArgs):
    print(f"This is a simple arg {someArg}")
    for arg in variableArgs:
        print(arg)


my_function(1, 2, 3, "a", "b")

# Output:
# This is a simple arg 1
# 2
# 3
# a
# b


# Esta funci√≥n debe aceptar una lista de productos y un n√∫mero variable de funciones callback jeje
# Cada callback representa un criterio de filtrado diferente.
# Un producto debe cumplir con todos los criterios de los callbacks para ser incluido en la lista final.

# Ejemplo: `filtered_products = filter_products(products, filter_by_price_range(40, 80), identify_low_stock_products(30))`
